# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.4
        environment:
          CONTENT_TYPE_NO_SNIFF: true
          DATABASE_URL: postgres://postgres@localhost:5432/network
          DEBUG: true
          DJANGO_SECRET_KEY: secret
          # pipenv install in .venv
          PIPENV_VENV_IN_PROJECT: true
          SET_HSTS: false
          USE_S3: false
          SSL_REDIRECT: false
          X_FRAME_OPTIONS: DENY
          XSS_PROTECTION: true


      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: network

    working_directory: ~/repo

    steps:
      - checkout
      # Use the chown command to grant CircleCI access to dependency locations
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - v1-dependencies-{{ .Branch }}-
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            pip install pipenv
            pipenv install --dev --deploy

      - save_cache:
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"
          key: v1-dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

      # run tests!
      - run:
          name: run tests
          command: |
            pipenv run flake8 tasks.py network-api/
            pipenv run coverage run --source './network-api/networkapi' network-api/manage.py test networkapi

      - store_artifacts:
          path: test-reports
          destination: test-reports
